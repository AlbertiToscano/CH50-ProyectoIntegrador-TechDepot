package com.techdepot.app.controller;


import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.techdepot.app.model.Address;
import com.techdepot.app.service.AddressService;




@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/v1/address") // localhost:8080/api/v1 
public class AddressController {

	AddressService addressService;

	public AddressController(AddressService addressService) {
		this.addressService = addressService;
	}

	@GetMapping("{id}") // http:localhost:8080/api/v1/customers/{id} 
	Address getUserById(@PathVariable("id") Long id){
		Address existingAddress = addressService.getAddressById(id);
		return existingAddress;
	}

	@GetMapping // http:localhost:8080/api/v1/customers?active=false&size=10&firstname="Estafany"
	Page<Address> getAllUsers(
			@RequestParam(
					name="active", 
					required = false,
					defaultValue = "true"
					) boolean isActive,
			@RequestParam(
					name="size", 
					required = false,
					defaultValue = "5"
					) int pageSize,
			@RequestParam(
					name="page", 
					required = false,
					defaultValue = "0"
					) int pageNumber
			){
		return addressService.getAllUsers(isActive, pageNumber, pageSize);
	}
	

	@PostMapping // http:localhost:8080/api/v1/address
	ResponseEntity<Address> createAddress(@RequestBody Address newAddress) {
		Address registeredAddress = addressService.createAddress(newAddress);
	   //return new ResponseEntity<>(registeredAddress, HttpStatus.CREATED);
	   return ResponseEntity.status(201).body(registeredAddress);
	}
	
	
	@PutMapping("{id}") // http:localhost:8080/api/v1/address/{id}
	ResponseEntity<Address> updateAddress(@PathVariable("id") Long id ,@RequestBody Address address) {
		Address updatedAddress = addressService.updateAddress(address, id);
		return ResponseEntity.ok(updatedAddress);
	}
	
	@DeleteMapping("{id}") // http:localhost:8080/api/v1/address/{id}
	ResponseEntity<Void> deleteAddress(@PathVariable("id") Long id){
		addressService.deleteAddress(id);
		return ResponseEntity.noContent().build(); // Status 204
		// Como no hay cuerpo en la respuesta, 
		// se debe llamar a .build() para finalizar la construcci√≥n del ResponseEntity.
	}
}